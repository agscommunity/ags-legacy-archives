///////////////////////////////////////////////////////////////////////////////
// THE TWEEN MODULE ///////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

// Fixed-point math constants (using 1000 as the multiplier for 3 decimal places)
#define FIXED_POINT_MULTIPLIER 1000

#define bool char

#define _eTweenReferenceGUI 0
#define _eTweenReferenceObject 1
#define _eTweenReferenceCharacter 2
#define _eTweenReferenceRegion 3
#define _eTweenReferenceMisc 4

#define _eTweenGUIPosition 0
#define _eTweenGUITransparency 1
#define _eTweenGUISize 2
#define _eTweenObjectPosition 3
#define _eTweenObjectTransparency 4
#define _eTweenCharacterPosition 5
#define _eTweenCharacterTransparency 6
#define _eTweenRegionLightLevel 7
#define _eTweenLabelColor 8
#define _eTweenSliderValue 9
#define _eTweenViewportX 10
#define _eTweenViewportY 11
#define _eTweenViewportXY 12
#define _eTweenShakeScreen 13
#define _eTweenAreaScaling 14
#define _eTweenSpeechVolume 15
#define _eTweenMusicMasterVolume 16
#define _eTweenDigitalMasterVolume 17
#define _eTweenSoundVolume 18
#define _eTweenChannelVolume 19

struct _TweenObject {
  int type;
  int refType;
  int refID;
  
  int timing;
  int style;

  int duration;
  int frameCount;

  short toX;
  short toY;
  short fromX;
  short fromY;
  
  // For limited GUI control support
  int guiControlID;
};

_TweenObject _tweens[MAX_TWEENS]; // Stores all the tweens in the game
int _longestTweenDuration = 0;

///////////////////////////////////////////////////////////////////////////////
// Utility Functions
///////////////////////////////////////////////////////////////////////////////

int IntSqrt(int value) {
  if (value <= 0) return 0;
  if (value == 1) return 1;
  
  int low = 1;
  int high = value;
  int result = 0;
  
  while (low <= high) {
    int mid = (low + high) / 2;
    int square = mid * mid;
    
    if (square == value) {
      return mid;
    } else if (square < value) {
      low = mid + 1;
      result = mid;
    } else {
      high = mid - 1;
    }
  }
  
  return result;
}

int IntPower(int base, int exponent) {
  if (exponent == 0) return 1;
  if (exponent == 1) return base;
  if (exponent == 2) return base * base;
  
  int result = 1;
  int i = 0;
  while (i < exponent) {
    result = result * base;
    i++;
  }
  return result;
}

function _AssertTrue(bool statement, string errorMessage) {
  if (statement) return;
  else if (game.debug_mode) {
    Display("Error: %s", errorMessage);
    QuitGame(0);
  }
}

int GetColorFromRGB(int red, int green, int blue) {
  int r32 = red / 8;
  int g64 = green / 4;
  int b32 = blue / 8;
  return (2048 * r32) + (32 * g64) + b32;
}

int MillisecondsToLoops(int milliseconds) {
  return (GetGameSpeed() * milliseconds) / 1000;
}

function WaitMilliseconds(int milliseconds) {
  Wait(MillisecondsToLoops(milliseconds));
}

function WaitForTweensToStop() {
  if (_longestTweenDuration > 0) {
    Wait(_longestTweenDuration);
  }
}

int _GetTweenRemainingDuration(int index) {
  return _tweens[index].duration - _tweens[index].frameCount;
}

function _CheckIfIsLongestTween(int index) {
  int remainingDuration = _GetTweenRemainingDuration(index);  
  if (_tweens[index].style != eReverseRepeatTween &&
      _tweens[index].style != eRepeatTween &&
     remainingDuration > _longestTweenDuration) {     
    _longestTweenDuration = remainingDuration;
  }
}

int GetDistance(int fromX, int fromY, int toX, int toY) {
  int deltaX = toX - fromX;
  int deltaY = toY - fromY;
  int distanceSquared = (deltaX * deltaX) + (deltaY * deltaY);
  return IntSqrt(distanceSquared) * FIXED_POINT_MULTIPLIER;
}

int SpeedToMilliseconds(int speed, int fromX, int fromY, int toX, int toY) {
  int distance = GetDistance(fromX, fromY, toX, toY);
  return (distance * 1000) / speed;
}

int Lerp(int from, int to, int amount) {
  int difference = to - from;
  return from + ((difference * amount) / FIXED_POINT_MULTIPLIER);
}

int ClampInt(int value, int min, int max) {
  if (value > max) return max;
  else if (value < min) return min;
  return value;
}

int _ComputeTiming(int currentTime, int duration, int timingType) {
  int timing = (currentTime * FIXED_POINT_MULTIPLIER) / duration;
  if (timingType != eLinearTween) {
    int timing2 = (timing * timing) / FIXED_POINT_MULTIPLIER;

    if (timingType == eEaseInTween) {
      timing = ((3 * timing2) - ((timing2 * timing) / FIXED_POINT_MULTIPLIER)) / 2;
    }
    else if (timingType == eEaseOutTween) {
      timing = ((3 * timing) - ((timing2 * timing) / FIXED_POINT_MULTIPLIER)) / 2;
    }
    else if (timingType == eEaseInEaseOutTween) {
      timing = (3 * timing2) - ((2 * timing * timing2) / FIXED_POINT_MULTIPLIER);
    }
  }
  return timing;
}

///////////////////////////////////////////////////////////////////////////////
// Tween Internal Step
///////////////////////////////////////////////////////////////////////////////

function _tween_step(int index, int amount) {
  int type = _tweens[index].type;
  int refID = _tweens[index].refID;
  int guiControlID = _tweens[index].guiControlID;
  int fromX = _tweens[index].fromX;
  int fromY = _tweens[index].fromY;
  int toX = _tweens[index].toX;
  int toY = _tweens[index].toY;

  if (type == _eTweenGUIPosition) {
    SetGUIPosition(refID, Lerp(fromX, toX, amount), Lerp(fromY, toY, amount));
  }
  else if (type == _eTweenGUISize) {
    SetGUISize(refID, Lerp(fromX, toX, amount), Lerp(fromY, toY, amount));
  }
  else if (type == _eTweenGUITransparency) {
    SetGUITransparency(refID, Lerp(fromX, toX, amount));
  }
  // OBJECT step
  else if (type == _eTweenObjectPosition) {
    SetObjectPosition(refID, Lerp(fromX, toX, amount), Lerp(fromY, toY, amount));
  }
  else if (type == _eTweenObjectTransparency) {
    SetObjectTransparency(refID, Lerp(fromX, toX, amount));
  }
  // CHARACTER step
  else if (type == _eTweenCharacterPosition) {
    character[refID].x = Lerp(fromX, toX, amount);
    character[refID].y = Lerp(fromY, toY, amount);
  }
  else if (type == _eTweenCharacterTransparency) {
    SetCharacterTransparency(refID, Lerp(fromX, toX, amount));
  }
  // REGION step
  else if (type == _eTweenRegionLightLevel) {
    SetAreaLightLevel(refID, Lerp(fromX, toX, amount));
  }
  // Limited GUI Control step
  else if (type == _eTweenLabelColor) {
    SetLabelColor(refID, guiControlID, GetColorFromRGB(Lerp(fromX, toX, amount), Lerp(fromY, toY, amount), Lerp(toX, toX, amount)));
  }
  else if (type == _eTweenSliderValue) {
    SetSliderValue(refID, guiControlID, Lerp(fromX, toX, amount));
  }
  // MISC step
  else if (type == _eTweenViewportX) {
    SetViewport(Lerp(fromX, toX, amount), GetViewportY());
  }
  else if (type == _eTweenViewportY) {
    SetViewport(GetViewportX(), Lerp(fromY, toY, amount));
  }
  else if (type == _eTweenViewportXY) {
    SetViewport(Lerp(fromX, toX, amount), Lerp(fromY, toY, amount));
  }
  else if (type == _eTweenShakeScreen) {
    ShakeScreenBackground(Lerp(fromX, toX, amount), Lerp(fromY, toY, amount), 1);
  }
  else if (type == _eTweenAreaScaling) {
    SetAreaScaling(refID, Lerp(fromX, toX, amount), Lerp(fromY, toY, amount));
  }
  // AUDIO step
  else if (type == _eTweenSpeechVolume) {
    SetSpeechVolume(Lerp(fromX, toX, amount));
  }
  // Pre AGS 3.2 strict audio
  else if (type == _eTweenMusicMasterVolume) {
    SetMusicMasterVolume(Lerp(fromX, toX, amount));
  }
  else if (type == _eTweenDigitalMasterVolume) {
    SetDigitalMasterVolume(Lerp(fromX, toX, amount));
  }
  else if (type == _eTweenSoundVolume) {
    SetSoundVolume(Lerp(fromX, toX, amount));
  }
  else if (type == _eTweenChannelVolume) {
    SetChannelVolume(refID, Lerp(fromX, toX, amount));
  }
}

function _CleanupTweens() {
  short i = 0;
  while (i < MAX_TWEENS) {
    if (_tweens[i].duration != -1) {
      _tween_step(i, 0);
      _tweens[i].duration = -1;
    }
    i++;
  }
}

///////////////////////////////////////////////////////////////////////////////
// AGS Events
///////////////////////////////////////////////////////////////////////////////

function tween_game_start() {
  // Initialize all the internal tween data on game start
  short i = 0;
  while (i < MAX_TWEENS) {
    _tweens[i].duration = -1;
    i++;
  }
}

function tween_repeatedly_execute_always() {
  _longestTweenDuration = 0;
  short i = 0;
  while (i < MAX_TWEENS) {
    if (_tweens[i].duration > 0) {
      // Compute the amount based on the timing type
      int amount = _ComputeTiming(
        _tweens[i].frameCount,
        _tweens[i].duration,
        _tweens[i].timing
        );

      // Update the tween
      _tween_step(i, amount);
      _tweens[i].frameCount++;

      // Repeat tween if needed
      if (_tweens[i].frameCount > _tweens[i].duration) {
        if (_tweens[i].style == eRepeatTween) {
          _tweens[i].frameCount = 0;
        }
        else if (_tweens[i].style == eReverseRepeatTween) {
          short fromX = _tweens[i].toX;
          short fromY = _tweens[i].toY;

          _tweens[i].toX = _tweens[i].fromX;
          _tweens[i].toY = _tweens[i].fromY;
          _tweens[i].fromX = fromX;
          _tweens[i].fromY = fromY;
          
          // Reverse the timing function if needed.
          if (_tweens[i].timing == eEaseOutTween) {
            _tweens[i].timing = eEaseInTween;
          }
          else if (_tweens[i].timing == eEaseInTween) {
            _tweens[i].timing = eEaseOutTween;
          }

          _tweens[i].frameCount = 0;
        }
        else {
          _tweens[i].duration = -1;
        }
      }
      else {
        _CheckIfIsLongestTween(i);
      }
    }

    i++;
  }
}

function tween_on_event(int event, int data) {
  if (event == LEAVE_ROOM) _CleanupTweens();
}

///////////////////////////////////////////////////////////////////////////////
// Tween Construction
///////////////////////////////////////////////////////////////////////////////

int _GetAvailableTweenSpot() {
  short i = 0;
  short spot = -1;

  // Pretty simple linear search for an available spot
  while (i < MAX_TWEENS && spot == -1) {
    if (_tweens[i].duration == -1) spot = i;
    i++;
  }

  if (game.debug_mode && spot < 0) {
    // Let the scripter know that tweens are maxed out, but ignore it completely in the non-debug version.
    string message;
    StrFormat(message, "Cannot create new tween because the Tween module is currently playing %d tween(s), which is the maximum. You can increase this max number on the Tween module script header.", MAX_TWEENS);
    _AssertTrue(0, message);
  }

  return spot;
}

int _StartTween(int type, int milliseconds, short toX, short toY, short fromX, short fromY,
  int refType, int refID, int guiControlID, int timing, int style) {
  
  short index = _GetAvailableTweenSpot();
  
  if (game.debug_mode) {
    // Make sure the index is good. This should not happen to scripters ever.
    _AssertTrue(index >= 0 && index < MAX_TWEENS, "Cannot create Tween. Invalid index!");
  }

  _tweens[index].type = type;
  _tweens[index].toX = toX;
  _tweens[index].toY = toY;
  _tweens[index].fromX = fromX;
  _tweens[index].fromY = fromY;
  _tweens[index].refType = refType;
  _tweens[index].refID = refID;
  _tweens[index].guiControlID = guiControlID;
  _tweens[index].duration = MillisecondsToLoops(milliseconds);
  _tweens[index].frameCount = 0;
  _tweens[index].timing = timing;
  _tweens[index].style = style;
  
  _CheckIfIsLongestTween(index);

  if (_tweens[index].style == eBlockTween) Wait(_tweens[index].duration + 1);
  else return _tweens[index].duration + 1;

  return 1;
}

int _StartGUITween(int type, int milliseconds, short toX, short toY, short fromX, short fromY,
    int guiID, int timing, int style) {
  return _StartTween(type, milliseconds, toX, toY, fromX, fromY, _eTweenReferenceGUI, guiID, 0, timing, style);
}
int _StartGUITweenBySpeed(int type, int speed, short toX, short toY, short fromX, short fromY,
    int guiID, int timing, int style) {
  return _StartGUITween(type, SpeedToMilliseconds(speed, fromX, fromY, toX, toY), toX, toY, fromX, fromY, guiID, timing, style);
}

int _StartObjectTween(int type, int milliseconds, short toX, short toY, short fromX, short fromY,
    int objectID, int timing, int style) {
  return _StartTween(type, milliseconds, toX, toY, fromX, fromY, _eTweenReferenceObject, objectID, 0, timing, style);
}
int _StartObjectTweenBySpeed(int type, int speed, short toX, short toY, short fromX, short fromY,
    int objectID, int timing, int style) {
  return _StartObjectTween(type, SpeedToMilliseconds(speed, fromX, fromY, toX, toY), toX, toY, fromX, fromY, objectID, timing, style);
}

int _StartCharacterTween(int type, int milliseconds, short toX, short toY, short fromX, short fromY,
    int characterID, int timing, int style) {
  return _StartTween(type, milliseconds, toX, toY, fromX, fromY, _eTweenReferenceCharacter, characterID, 0, timing, style);
}
int _StartCharacterTweenBySpeed(int type, int speed, short toX, short toY, short fromX, short fromY,
    int characterID, int timing, int style) {
  return _StartCharacterTween(type, SpeedToMilliseconds(speed, fromX, fromY, toX, toY), toX, toY, fromX, fromY, characterID, timing, style);
}

int _StartRegionTween(int type, int milliseconds, short toX, short toY, short fromX, short fromY,
    int regionID, int timing, int style) {
  return _StartTween(type, milliseconds, toX, toY, fromX, fromY, _eTweenReferenceRegion, regionID, 0, timing, style);
}

int _StartMiscTween(int type, int milliseconds, short toX, short toY, short fromX, short fromY, int id,
    int timing, int style) {
  return _StartTween(type, milliseconds, toX, toY, fromX, fromY, _eTweenReferenceMisc, id, 0, timing, style);
}
int _StartMiscTweenBySpeed(int type, int speed, short toX, short toY, short fromX, short fromY, int id,
    int timing, int style) {
  return _StartMiscTween(type, SpeedToMilliseconds(speed, fromX, fromY, toX, toY), toX, toY, fromX, fromY, id, timing, style);
}

int _StartGUIControlTween(int type, int milliseconds, short toX, short toY, short toZ, short fromX, short fromY, short fromZ,
    int guiID, int guiControlID, int timing, int style) {
  return _StartTween(type, milliseconds, toX, toY, fromX, fromY, _eTweenReferenceGUI, guiID, guiControlID, timing, style);
}

///////////////////////////////////////////////////////////////////////////////
// Public Tween Functions
///////////////////////////////////////////////////////////////////////////////

// GUI Tweens
int TweenGUIPosition(int guiID, int milliseconds, short fromX, short fromY, short toX, short toY, int timing, int style) {
  return _StartGUITween(_eTweenGUIPosition, milliseconds, toX, toY, fromX, fromY, guiID, timing, style);
}
int TweenGUIPositionBySpeed(int guiID, int speed, short fromX, short fromY, short toX, short toY, int timing, int style) {
  return _StartGUITweenBySpeed(_eTweenGUIPosition, speed, toX, toY, fromX, fromY, guiID, timing, style);
}
int TweenGUITransparency(int guiID, int milliseconds, short fromTransparency, short toTransparency, int timing, int style) {
  return _StartGUITween(_eTweenGUITransparency, milliseconds, toTransparency, 0, fromTransparency, 0, guiID, timing, style);
}
int TweenGUISize(int guiID, int milliseconds, short fromWidth, short fromHeight, short toWidth, short toHeight, int timing, int style) {
  return _StartGUITween(_eTweenGUISize, milliseconds, toWidth, toHeight, fromWidth, fromHeight, guiID, timing, style);
}

// Limited GUI Control Tweens
int TweenLabelColor(int guiID, int objectID, int milliseconds, short fromR, short fromG, short fromB, short toR, short toG, short toB, int timing, int style) {
  return _StartGUIControlTween(_eTweenLabelColor, milliseconds, toR, toG, toB, fromR, fromG, fromB, guiID, objectID, timing, style);
}
int TweenSliderValue(int guiID, int objectID, int milliseconds, short toValue, int timing, int style) {
  return _StartGUIControlTween(_eTweenSliderValue, milliseconds, toValue, 0, 0, GetSliderValue(guiID, objectID), 0, 0, guiID, objectID, timing, style);
}

// OBJECT Tweens
int TweenObjectPosition(int objectID, int milliseconds, short fromX, short fromY, short toX, short toY, int timing, int style) {
  return _StartObjectTween(_eTweenObjectPosition, milliseconds, toX, toY, fromX, fromY, objectID, timing, style);
}
int TweenObjectPositionBySpeed(int objectID, int speed, short fromX, short fromY, short toX, short toY, int timing, int style) {
  return _StartObjectTweenBySpeed(_eTweenObjectPosition, speed, toX, toY, fromX, fromY, objectID, timing, style);
}
int TweenObjectTransparency(int objectID, int milliseconds, short fromTransparency, short toTransparency, int timing, int style) {
  return _StartObjectTween(_eTweenObjectTransparency, milliseconds, toTransparency, 0, fromTransparency, 0, objectID, timing, style);
}
int TweenObjectImage(int objectID, int tmpObjectID, int milliseconds, short toSprite, int timing, int style) {
  SetObjectGraphic(tmpObjectID, GetObjectGraphic(objectID));
  SetObjectPosition(tmpObjectID, GetObjectX(objectID), GetObjectY(objectID));
  SetObjectTransparency(tmpObjectID, 0);
  ObjectOn(tmpObjectID);

  SetObjectTransparency(objectID, 100);
  SetObjectGraphic(objectID, toSprite);

  if (style == eBlockTween) TweenObjectTransparency(tmpObjectID, milliseconds, 0, 100, timing, eNoBlockTween);
  else TweenObjectTransparency(tmpObjectID, milliseconds, 0, 100, timing, style);
  
  return TweenObjectTransparency(objectID, milliseconds, 100, 0, timing, style);
}

// CHARACTER Tweens
int TweenCharacterPosition(int characterID, int milliseconds, short toX, short toY, int timing, int style) {
  return _StartCharacterTween(_eTweenCharacterPosition, milliseconds, toX, toY, character[characterID].x, character[characterID].y, characterID, timing, style);
}
int TweenCharacterPositionBySpeed(int characterID, int speed, short toX, short toY, int timing, int style) {
  return _StartCharacterTweenBySpeed(_eTweenCharacterPosition, speed, toX, toY, character[characterID].x, character[characterID].y, characterID, timing, style);
}

int TweenCharacterTransparency(int characterID, int milliseconds, short fromTransparency, short toTransparency, int timing, int style) {
  return _StartCharacterTween(_eTweenCharacterTransparency, milliseconds, toTransparency, 0, fromTransparency, 0, characterID, timing, style);
}

// REGION Tweens
int TweenRegionLightLevel(int regionID, int milliseconds, short fromLightLevel, short toLightLevel, int timing, int style) {
  return _StartRegionTween(_eTweenRegionLightLevel, milliseconds, toLightLevel, 0, fromLightLevel, 0, regionID, timing, style);
}

// MISC Tweens
int TweenViewportX(int milliseconds, short toX, int timing, int style) {
  return _StartMiscTween(_eTweenViewportX, milliseconds, toX, 0, GetViewportX(), 0, 0, timing, style);
}
int TweenViewportY(int milliseconds, short toY, int timing, int style) {
  return _StartMiscTween(_eTweenViewportY, milliseconds, 0, toY, 0, GetViewportY(), 0, timing, style);
}
int TweenViewportXBySpeed(int speed, short toX, int timing, int style) {
  return _StartMiscTweenBySpeed(_eTweenViewportX, speed, toX, 0, GetViewportX(), 0, 0, timing, style);
}
int TweenViewportYBySpeed(int speed, short toY, int timing, int style) {
  return _StartMiscTweenBySpeed(_eTweenViewportY, speed, 0, toY, 0, GetViewportY(), 0, timing, style);
}
int TweenViewportPosition(int milliseconds, short toX, short toY, int timing, int style) {
  return _StartMiscTween(_eTweenViewportXY, milliseconds, toX, toY, GetViewportX(), GetViewportY(), 0, timing, style);
}
int TweenViewportPositionBySpeed(int speed, short toX, short toY, int timing, int style) {
  return _StartMiscTweenBySpeed(_eTweenViewportXY, speed, toX, toY, GetViewportX(), GetViewportY(), 0, timing, style);
}

int TweenShakeScreen(int milliseconds, short fromDelay, short toDelay, short fromAmount, short toAmount, int timing, int style) {
  return _StartMiscTween(_eTweenShakeScreen, milliseconds,  toDelay, toAmount, fromDelay, fromAmount, 0, timing, style);
}
int TweenAreaScaling(int milliseconds, int area, short fromMin, short toMin, short fromMax, short toMax, int timing, int style) {
  return _StartMiscTween(_eTweenAreaScaling, milliseconds, toMin, toMax, fromMin, fromMax, area, timing, style);
}

// AUDIO Tweens
int TweenSpeechVolume(int milliseconds, short fromVolume, short toVolume, int timing, int style) {
  return _StartMiscTween(_eTweenSpeechVolume, milliseconds, toVolume, 0, fromVolume, 0, 0, timing, style);
}
// Pre 3.2 Strict Audio Tweens
int TweenMusicMasterVolume(int milliseconds, short fromVolume, short toVolume, int timing, int style) {
  return _StartMiscTween(_eTweenMusicMasterVolume, milliseconds, toVolume, 0, fromVolume, 0, 0, timing, style);
}
int TweenDigitalMasterVolume(int milliseconds, short fromVolume, short toVolume, int timing, int style) {
  return _StartMiscTween(_eTweenDigitalMasterVolume, milliseconds, toVolume, 0, fromVolume, 0, 0, timing, style);
}
int TweenSoundVolume(int milliseconds, short fromVolume, short toVolume, int timing, int style) {
  return _StartMiscTween(_eTweenSoundVolume, milliseconds, toVolume, 0, fromVolume, 0, 0, timing, style);
}
int TweenChannelVolume(int milliseconds, int channel, short fromVolume, short toVolume, int timing, int style) {
  return _StartMiscTween(_eTweenChannelVolume, milliseconds, toVolume, 0, fromVolume, 0, channel, timing, style);
}

///////////////////////////////////////////////////////////////////////////////
// Tween Stoppers
///////////////////////////////////////////////////////////////////////////////

function _StopTween(short index, int result) {
  if (_tweens[index].duration != -1) {
    if (result == eFinishTween)  _tween_step(index, FIXED_POINT_MULTIPLIER);
    else if (result == eResetTween) _tween_step(index, 0);

    _tweens[index].duration = -1;
  }
}

// Internal Function, stops all tweens for a particular ags object
function _StopTweens(int refType, int refID, int result) {
  short i = 0;
  while (i < MAX_TWEENS) {
    if (_tweens[i].refType == refType && _tweens[i].refID == refID)
      _StopTween(i, result);
    i++;
  }
}

function TweenStopAllForGUI(int guiID, int result) {
  _StopTweens(_eTweenReferenceGUI, guiID, result);
}
function TweenStopAllForObject(int objectID, int result) {
  _StopTweens(_eTweenReferenceObject, objectID, result);
}
function TweenStopAllForCharacter(int characterID, int result) {
  _StopTweens(_eTweenReferenceCharacter, characterID, result);
}
function TweenStopAllForRegion(int regionID, int result) {
  _StopTweens(_eTweenReferenceRegion, regionID, result);
}

function TweenStopAll(int result) {
  short i = 0;
  while (i < MAX_TWEENS) {
    _StopTween(i, result);
    i++;
  }
}

///////////////////////////////////////////////////////////////////////////////
// END OF THE TWEEN MODULE ////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////